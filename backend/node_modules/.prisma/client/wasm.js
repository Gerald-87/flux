
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  businessType: 'businessType',
  subscriptionPlan: 'subscriptionPlan',
  subscriptionStatus: 'subscriptionStatus',
  subscriptionExpiry: 'subscriptionExpiry',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorSettingsScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  taxRate: 'taxRate',
  currency: 'currency',
  timezone: 'timezone',
  receiptHeader: 'receiptHeader',
  receiptFooter: 'receiptFooter',
  loyaltyEnabled: 'loyaltyEnabled',
  loyaltyPointsPerDollar: 'loyaltyPointsPerDollar',
  loyaltyRedemptionRate: 'loyaltyRedemptionRate',
  loyaltyMinimumPoints: 'loyaltyMinimumPoints',
  lowStockAlert: 'lowStockAlert',
  lowStockThreshold: 'lowStockThreshold',
  emailNotifications: 'emailNotifications',
  smsNotifications: 'smsNotifications',
  dailyReports: 'dailyReports',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  passwordHash: 'passwordHash',
  role: 'role',
  vendorId: 'vendorId',
  name: 'name',
  avatar: 'avatar',
  isActive: 'isActive',
  terminalId: 'terminalId',
  assignedLocations: 'assignedLocations',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CashierScheduleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  checkInTime: 'checkInTime',
  checkOutTime: 'checkOutTime',
  workDays: 'workDays',
  timezone: 'timezone',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  name: 'name',
  description: 'description',
  sku: 'sku',
  barcode: 'barcode',
  category: 'category',
  brand: 'brand',
  price: 'price',
  costPrice: 'costPrice',
  totalStock: 'totalStock',
  minStock: 'minStock',
  maxStock: 'maxStock',
  unit: 'unit',
  images: 'images',
  isActive: 'isActive',
  expiryDate: 'expiryDate',
  trackExpiry: 'trackExpiry',
  trackSerial: 'trackSerial',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductVariantScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  name: 'name',
  value: 'value',
  priceModifier: 'priceModifier',
  stock: 'stock',
  sku: 'sku',
  barcode: 'barcode',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductStockLocationScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  variantId: 'variantId',
  locationName: 'locationName',
  quantity: 'quantity',
  reservedQuantity: 'reservedQuantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CashierProductAssignmentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  productId: 'productId',
  assignedAt: 'assignedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  dateOfBirth: 'dateOfBirth',
  loyaltyPoints: 'loyaltyPoints',
  totalSpent: 'totalSpent',
  visitCount: 'visitCount',
  lastVisit: 'lastVisit',
  isActive: 'isActive',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  cashierId: 'cashierId',
  terminalId: 'terminalId',
  customerId: 'customerId',
  receiptNumber: 'receiptNumber',
  subtotal: 'subtotal',
  tax: 'tax',
  discount: 'discount',
  total: 'total',
  paid: 'paid',
  changeAmount: 'changeAmount',
  paymentMethod: 'paymentMethod',
  status: 'status',
  refundAmount: 'refundAmount',
  loyaltyPointsEarned: 'loyaltyPointsEarned',
  loyaltyPointsUsed: 'loyaltyPointsUsed',
  notes: 'notes',
  receiptData: 'receiptData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SaleItemScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  productId: 'productId',
  variantId: 'variantId',
  name: 'name',
  sku: 'sku',
  price: 'price',
  quantity: 'quantity',
  discount: 'discount',
  total: 'total',
  createdAt: 'createdAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  name: 'name',
  contactPerson: 'contactPerson',
  email: 'email',
  phone: 'phone',
  address: 'address',
  paymentTerms: 'paymentTerms',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  supplierId: 'supplierId',
  purchaseNumber: 'purchaseNumber',
  subtotal: 'subtotal',
  tax: 'tax',
  total: 'total',
  status: 'status',
  deliveryDate: 'deliveryDate',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PurchaseItemScalarFieldEnum = {
  id: 'id',
  purchaseId: 'purchaseId',
  productId: 'productId',
  variantId: 'variantId',
  name: 'name',
  sku: 'sku',
  costPrice: 'costPrice',
  quantity: 'quantity',
  total: 'total',
  createdAt: 'createdAt'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  productId: 'productId',
  variantId: 'variantId',
  movementType: 'movementType',
  quantity: 'quantity',
  referenceType: 'referenceType',
  referenceId: 'referenceId',
  referenceNumber: 'referenceNumber',
  locationFrom: 'locationFrom',
  locationTo: 'locationTo',
  notes: 'notes',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
};

exports.Prisma.StockTakeScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  location: 'location',
  status: 'status',
  notes: 'notes',
  createdBy: 'createdBy',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StockTakeItemScalarFieldEnum = {
  id: 'id',
  stockTakeId: 'stockTakeId',
  productId: 'productId',
  variantId: 'variantId',
  productName: 'productName',
  sku: 'sku',
  expectedQuantity: 'expectedQuantity',
  countedQuantity: 'countedQuantity',
  notes: 'notes',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  type: 'type',
  title: 'title',
  message: 'message',
  isRead: 'isRead',
  link: 'link',
  createdAt: 'createdAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  userId: 'userId',
  action: 'action',
  resource: 'resource',
  resourceId: 'resourceId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SupportTicketScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  vendorName: 'vendorName',
  subject: 'subject',
  description: 'description',
  status: 'status',
  priority: 'priority',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  vendorId: 'vendorId',
  type: 'type',
  period: 'period',
  startDate: 'startDate',
  endDate: 'endDate',
  data: 'data',
  generatedBy: 'generatedBy',
  generatedAt: 'generatedAt'
};

exports.Prisma.PricingPlanScalarFieldEnum = {
  id: 'id',
  name: 'name',
  price: 'price',
  duration: 'duration',
  features: 'features',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemSettingsScalarFieldEnum = {
  id: 'id',
  settingKey: 'settingKey',
  settingValue: 'settingValue',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  TRIAL: 'TRIAL',
  BASIC: 'BASIC',
  STANDARD: 'STANDARD',
  PREMIUM: 'PREMIUM'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  TRIALING: 'TRIALING',
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.UserRole = exports.$Enums.UserRole = {
  SUPERADMIN: 'SUPERADMIN',
  VENDOR: 'VENDOR',
  CASHIER: 'CASHIER'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CARD: 'CARD',
  MOBILE: 'MOBILE',
  LOYALTY: 'LOYALTY'
};

exports.SaleStatus = exports.$Enums.SaleStatus = {
  COMPLETED: 'COMPLETED',
  REFUNDED: 'REFUNDED',
  PARTIAL_REFUND: 'PARTIAL_REFUND'
};

exports.PurchaseStatus = exports.$Enums.PurchaseStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.StockMovementType = exports.$Enums.StockMovementType = {
  SALE: 'SALE',
  PURCHASE: 'PURCHASE',
  ADJUSTMENT: 'ADJUSTMENT',
  TRANSFER: 'TRANSFER',
  RETURN: 'RETURN'
};

exports.StockTakeStatus = exports.$Enums.StockTakeStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  LOW_STOCK: 'LOW_STOCK',
  PURCHASE_RECEIVED: 'PURCHASE_RECEIVED',
  STOCK_TAKE_COMPLETE: 'STOCK_TAKE_COMPLETE',
  SYSTEM: 'SYSTEM',
  TRANSFER_COMPLETE: 'TRANSFER_COMPLETE'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  CLOSED: 'CLOSED'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH'
};

exports.ReportType = exports.$Enums.ReportType = {
  SALES: 'SALES',
  INVENTORY: 'INVENTORY',
  CUSTOMER: 'CUSTOMER',
  PROFIT: 'PROFIT'
};

exports.ReportPeriod = exports.$Enums.ReportPeriod = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  CUSTOM: 'CUSTOM'
};

exports.Prisma.ModelName = {
  Vendor: 'Vendor',
  VendorSettings: 'VendorSettings',
  User: 'User',
  CashierSchedule: 'CashierSchedule',
  Product: 'Product',
  ProductVariant: 'ProductVariant',
  ProductStockLocation: 'ProductStockLocation',
  CashierProductAssignment: 'CashierProductAssignment',
  Customer: 'Customer',
  Sale: 'Sale',
  SaleItem: 'SaleItem',
  Supplier: 'Supplier',
  Purchase: 'Purchase',
  PurchaseItem: 'PurchaseItem',
  StockMovement: 'StockMovement',
  StockTake: 'StockTake',
  StockTakeItem: 'StockTakeItem',
  Notification: 'Notification',
  AuditLog: 'AuditLog',
  SupportTicket: 'SupportTicket',
  Report: 'Report',
  PricingPlan: 'PricingPlan',
  SystemSettings: 'SystemSettings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
